数据获取
数据清洗 
数据种类
数据集概要
实体规模，实体关系规模，回答xx类问题，实体类型，属性类型，实体关系类型 （gittub上表格）
构建知识图谱  

3.1 知识采集

    3.1.1 数据获取 
    通过编写python程序下载tushare工具包，调用数据下载接口，，获取了基金，基金经理，基金公司，债券四类数据，并根据其类型设定了不同的参数。
    （获取到的数据如图所示）
    3.1.2 数据预处理
    通过接口获取的数据如下，本文对数据进行预处理，转换格式，删除空格，重复值，填充缺失值，处理后的数据
    最后得到的数据信息：框架（统计图）

3.2 知识抽取

    知识之所以被称为知识，是因为它可以被利用。数据经过知识抽取变为知识，知识抽取的重要性显而易见。对于半结构化数据无需经过知识抽取步骤，因为半结构化数据可以通过网页或文件自身结构的分析转变成结构化知识数据。
    由于在海量数据中，非结构化数据则是主力军，所以知识抽取多指从非结构化数据抽取知识的过程。对于非结构化数据进行知识抽取（袁安云，2017）一般包括实体抽取、属性抽取和关系抽取等。
    本文主要选择半结构化数据，通过编写python脚本，并使用numpy将csv文件转为json文件，其中每一个json元素对应于原有主句中的一列，键名对应原csv文件中的列名。
    （展示原数据 与 json 数据）
    因此，本文通过构建相应的规则，通过编写程序白遍历得到实体-关系-实体，实体-属性-实体，以及实体-属性这三种三元组形式，并存储在实体列表，关系列表，属性列表中。
    （关键代码如下）
    本文根据四种不同类实体各自的属性以及之间的关系，设计了如下表：
    （gittub上表格）

3.3 知识存储

    对数据进行知识抽取后，实现了三元组的构建，接着构建知识图谱的实体节点以及关系，整个知识图谱就初步建立成功，最后将知识图谱存储到图数据库中。neo4j图数据库通过图的方式展现三元组知识，图能够更加直观的展现实体间关系，从而使本文构建的金融知识图谱具有较强的解释性。
    本文主要通过 py2neo 库中的 Node（）方法来创建知识图谱的实体节点以及节点属性，通过RelationshiopO方法创建实体间的关系。再通过create_node（）函数建立所有实体节点，create_relationship（）函数建立所有关系，最后将实体与关系依次导入到图数据库中，形成知识网络。
    （具体代码如图3.10、3.11所示：）

    最后包含xx个实体，xx条关系变
    (知识图谱可视化图)


3.4 知识查询
    在后台连接上neo4j图数据库，输入Cypher查询语句，就能查看知识图谱中的可视化查询界面。
    例如，在neo4j中，通过Cypher查询语句MATCH p=0-【r：）所属行业~】->（）RETURN p LIMITT 25，查询到的结果如图3.13所示。节点的颜色不同，所代表的实体类型也不同，其中蓝色的节点代表着行业类型"旅游服务"，橘色的节点代表着所属行业为旅游服务的其中一些股票，可以看出西安旅游、中国中免、曲江文旅等的所属行业均为旅游服务。
   （可视化查询界面）
    实体的属性以JSON文本形式存储，通过图谱节点就能看到，从图3.14中可以看出股票节点"迈普医学"的所有属性，包括秘书、员工人数、代码、公司介绍等。
    （节点属性）




